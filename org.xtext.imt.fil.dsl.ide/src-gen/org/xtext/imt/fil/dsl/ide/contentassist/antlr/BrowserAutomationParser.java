/*
 * generated by Xtext 2.19.0
 */
package org.xtext.imt.fil.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.imt.fil.dsl.ide.contentassist.antlr.internal.InternalBrowserAutomationParser;
import org.xtext.imt.fil.dsl.services.BrowserAutomationGrammarAccess;

public class BrowserAutomationParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BrowserAutomationGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BrowserAutomationGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getWebBrowserAccess().getAlternatives(), "rule__WebBrowser__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getGetAccess().getAlternatives_3(), "rule__Get__Alternatives_3");
			builder.put(grammarAccess.getGetAccess().getAlternatives_3_0_2(), "rule__Get__Alternatives_3_0_2");
			builder.put(grammarAccess.getAttributeValueAccess().getAlternatives(), "rule__AttributeValue__Alternatives");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getAttributAccess().getAlternatives(), "rule__Attribut__Alternatives");
			builder.put(grammarAccess.getInsertAccess().getAlternatives_1(), "rule__Insert__Alternatives_1");
			builder.put(grammarAccess.getBrowserAutomationAccess().getGroup(), "rule__BrowserAutomation__Group__0");
			builder.put(grammarAccess.getDoActionAccess().getGroup(), "rule__DoAction__Group__0");
			builder.put(grammarAccess.getGoToAccess().getGroup(), "rule__GoTo__Group__0");
			builder.put(grammarAccess.getUncheckAllAccess().getGroup(), "rule__UncheckAll__Group__0");
			builder.put(grammarAccess.getGetAccess().getGroup(), "rule__Get__Group__0");
			builder.put(grammarAccess.getGetAccess().getGroup_3_0(), "rule__Get__Group_3_0__0");
			builder.put(grammarAccess.getGetAccess().getGroup_3_0_2_0(), "rule__Get__Group_3_0_2_0__0");
			builder.put(grammarAccess.getGetAccess().getGroup_3_0_2_1(), "rule__Get__Group_3_0_2_1__0");
			builder.put(grammarAccess.getOrderAccess().getGroup(), "rule__Order__Group__0");
			builder.put(grammarAccess.getClickAccess().getGroup(), "rule__Click__Group__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
			builder.put(grammarAccess.getCheckAccess().getGroup(), "rule__Check__Group__0");
			builder.put(grammarAccess.getChooseAccess().getGroup(), "rule__Choose__Group__0");
			builder.put(grammarAccess.getContainsAccess().getGroup(), "rule__Contains__Group__0");
			builder.put(grammarAccess.getBrowserAutomationAccess().getTestNameAssignment_1(), "rule__BrowserAutomation__TestNameAssignment_1");
			builder.put(grammarAccess.getBrowserAutomationAccess().getWebBrowserAssignment_4(), "rule__BrowserAutomation__WebBrowserAssignment_4");
			builder.put(grammarAccess.getBrowserAutomationAccess().getStatementsAssignment_5(), "rule__BrowserAutomation__StatementsAssignment_5");
			builder.put(grammarAccess.getDoActionAccess().getGetAssignment_0(), "rule__DoAction__GetAssignment_0");
			builder.put(grammarAccess.getDoActionAccess().getActionAssignment_1(), "rule__DoAction__ActionAssignment_1");
			builder.put(grammarAccess.getGoToAccess().getUrlAssignment_2(), "rule__GoTo__UrlAssignment_2");
			builder.put(grammarAccess.getGetAccess().getVarRefAssignment_0(), "rule__Get__VarRefAssignment_0");
			builder.put(grammarAccess.getGetAccess().getElementAssignment_3_0_0(), "rule__Get__ElementAssignment_3_0_0");
			builder.put(grammarAccess.getGetAccess().getOrderAssignment_3_0_1(), "rule__Get__OrderAssignment_3_0_1");
			builder.put(grammarAccess.getGetAccess().getAttrAssignment_3_0_2_0_1(), "rule__Get__AttrAssignment_3_0_2_0_1");
			builder.put(grammarAccess.getGetAccess().getAttrValAssignment_3_0_2_0_3(), "rule__Get__AttrValAssignment_3_0_2_0_3");
			builder.put(grammarAccess.getGetAccess().getFromAssignment_3_0_2_1_1(), "rule__Get__FromAssignment_3_0_2_1_1");
			builder.put(grammarAccess.getGetAccess().getPageTitleAssignment_3_1(), "rule__Get__PageTitleAssignment_3_1");
			builder.put(grammarAccess.getAttributeValueAccess().getStringValAssignment_0(), "rule__AttributeValue__StringValAssignment_0");
			builder.put(grammarAccess.getAttributeValueAccess().getVarRefValAssignment_1(), "rule__AttributeValue__VarRefValAssignment_1");
			builder.put(grammarAccess.getOrderAccess().getOrderAssignment_1(), "rule__Order__OrderAssignment_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
			builder.put(grammarAccess.getVarReferenceAccess().getVarRefAssignment(), "rule__VarReference__VarRefAssignment");
			builder.put(grammarAccess.getClickAccess().getVarRefAssignment_2(), "rule__Click__VarRefAssignment_2");
			builder.put(grammarAccess.getInsertAccess().getAttrValAssignment_1_0(), "rule__Insert__AttrValAssignment_1_0");
			builder.put(grammarAccess.getInsertAccess().getVarRefAssignment_1_1(), "rule__Insert__VarRefAssignment_1_1");
			builder.put(grammarAccess.getInsertAccess().getVar2Assignment_3(), "rule__Insert__Var2Assignment_3");
			builder.put(grammarAccess.getVerifyAccess().getVarToVerifyAssignment_0(), "rule__Verify__VarToVerifyAssignment_0");
			builder.put(grammarAccess.getCheckAccess().getVarCheckAssignment_1(), "rule__Check__VarCheckAssignment_1");
			builder.put(grammarAccess.getChooseAccess().getValueAssignment_1(), "rule__Choose__ValueAssignment_1");
			builder.put(grammarAccess.getChooseAccess().getVarChooseAssignment_3(), "rule__Choose__VarChooseAssignment_3");
			builder.put(grammarAccess.getContainsAccess().getVarContainsAssignment_0(), "rule__Contains__VarContainsAssignment_0");
			builder.put(grammarAccess.getContainsAccess().getVarContainedAssignment_2(), "rule__Contains__VarContainedAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BrowserAutomationGrammarAccess grammarAccess;

	@Override
	protected InternalBrowserAutomationParser createParser() {
		InternalBrowserAutomationParser result = new InternalBrowserAutomationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BrowserAutomationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BrowserAutomationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
