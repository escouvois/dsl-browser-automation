/*
 * generated by Xtext 2.17.0
 */
package org.xtext.imt.fil.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.imt.fil.dsl.ide.contentassist.antlr.internal.InternalBrowserAutomationParser;
import org.xtext.imt.fil.dsl.services.BrowserAutomationGrammarAccess;

public class BrowserAutomationParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BrowserAutomationGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BrowserAutomationGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getWebBrowserAccess().getAlternatives(), "rule__WebBrowser__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getAttributAccess().getAlternatives(), "rule__Attribut__Alternatives");
			builder.put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
			builder.put(grammarAccess.getGetAccess().getGroup(), "rule__Get__Group__0");
			builder.put(grammarAccess.getClickAccess().getGroup(), "rule__Click__Group__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
			builder.put(grammarAccess.getTestAccess().getWebBrowserAssignment_2(), "rule__Test__WebBrowserAssignment_2");
			builder.put(grammarAccess.getTestAccess().getUrlAssignment_5(), "rule__Test__UrlAssignment_5");
			builder.put(grammarAccess.getTestAccess().getActionsAssignment_6(), "rule__Test__ActionsAssignment_6");
			builder.put(grammarAccess.getGetAccess().getVarAssignment_0(), "rule__Get__VarAssignment_0");
			builder.put(grammarAccess.getGetAccess().getElementAssignment_3(), "rule__Get__ElementAssignment_3");
			builder.put(grammarAccess.getGetAccess().getAttrAssignment_5(), "rule__Get__AttrAssignment_5");
			builder.put(grammarAccess.getGetAccess().getAttrValAssignment_7(), "rule__Get__AttrValAssignment_7");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
			builder.put(grammarAccess.getVarReferenceAccess().getVarAssignment(), "rule__VarReference__VarAssignment");
			builder.put(grammarAccess.getClickAccess().getGetAssignment_0(), "rule__Click__GetAssignment_0");
			builder.put(grammarAccess.getClickAccess().getVarAssignment_3(), "rule__Click__VarAssignment_3");
			builder.put(grammarAccess.getInsertAccess().getGetAssignment_0(), "rule__Insert__GetAssignment_0");
			builder.put(grammarAccess.getInsertAccess().getValueAssignment_2(), "rule__Insert__ValueAssignment_2");
			builder.put(grammarAccess.getInsertAccess().getVarAssignment_4(), "rule__Insert__VarAssignment_4");
			builder.put(grammarAccess.getVerifyAccess().getGetAssignment_0(), "rule__Verify__GetAssignment_0");
			builder.put(grammarAccess.getVerifyAccess().getVarAssignment_2(), "rule__Verify__VarAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BrowserAutomationGrammarAccess grammarAccess;

	@Override
	protected InternalBrowserAutomationParser createParser() {
		InternalBrowserAutomationParser result = new InternalBrowserAutomationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BrowserAutomationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BrowserAutomationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
