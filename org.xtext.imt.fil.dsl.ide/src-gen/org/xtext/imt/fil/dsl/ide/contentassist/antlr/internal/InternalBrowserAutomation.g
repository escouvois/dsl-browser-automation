/*
 * generated by Xtext 2.17.0
 */
grammar InternalBrowserAutomation;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.imt.fil.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.imt.fil.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.imt.fil.dsl.services.BrowserAutomationGrammarAccess;

}
@parser::members {
	private BrowserAutomationGrammarAccess grammarAccess;

	public void setGrammarAccess(BrowserAutomationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTest
entryRuleTest
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestAccess().getGroup()); }
		(rule__Test__Group__0)
		{ after(grammarAccess.getTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWebBrowser
entryRuleWebBrowser
:
{ before(grammarAccess.getWebBrowserRule()); }
	 ruleWebBrowser
{ after(grammarAccess.getWebBrowserRule()); } 
	 EOF 
;

// Rule WebBrowser
ruleWebBrowser 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWebBrowserAccess().getAlternatives()); }
		(rule__WebBrowser__Alternatives)
		{ after(grammarAccess.getWebBrowserAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGet
entryRuleGet
:
{ before(grammarAccess.getGetRule()); }
	 ruleGet
{ after(grammarAccess.getGetRule()); } 
	 EOF 
;

// Rule Get
ruleGet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGetAccess().getGroup()); }
		(rule__Get__Group__0)
		{ after(grammarAccess.getGetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribut
entryRuleAttribut
:
{ before(grammarAccess.getAttributRule()); }
	 ruleAttribut
{ after(grammarAccess.getAttributRule()); } 
	 EOF 
;

// Rule Attribut
ruleAttribut 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributAccess().getAlternatives()); }
		(rule__Attribut__Alternatives)
		{ after(grammarAccess.getAttributAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarReference
entryRuleVarReference
:
{ before(grammarAccess.getVarReferenceRule()); }
	 ruleVarReference
{ after(grammarAccess.getVarReferenceRule()); } 
	 EOF 
;

// Rule VarReference
ruleVarReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarReferenceAccess().getVarAssignment()); }
		(rule__VarReference__VarAssignment)
		{ after(grammarAccess.getVarReferenceAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClick
entryRuleClick
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickAccess().getGroup()); }
		(rule__Click__Group__0)
		{ after(grammarAccess.getClickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsert
entryRuleInsert
:
{ before(grammarAccess.getInsertRule()); }
	 ruleInsert
{ after(grammarAccess.getInsertRule()); } 
	 EOF 
;

// Rule Insert
ruleInsert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertAccess().getGroup()); }
		(rule__Insert__Group__0)
		{ after(grammarAccess.getInsertAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerify
entryRuleVerify
:
{ before(grammarAccess.getVerifyRule()); }
	 ruleVerify
{ after(grammarAccess.getVerifyRule()); } 
	 EOF 
;

// Rule Verify
ruleVerify 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerifyAccess().getGroup()); }
		(rule__Verify__Group__0)
		{ after(grammarAccess.getVerifyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WebBrowser__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWebBrowserAccess().getFirefoxKeyword_0()); }
		'firefox'
		{ after(grammarAccess.getWebBrowserAccess().getFirefoxKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getWebBrowserAccess().getChromeKeyword_1()); }
		'chrome'
		{ after(grammarAccess.getWebBrowserAccess().getChromeKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getWebBrowserAccess().getSafariKeyword_2()); }
		'safari'
		{ after(grammarAccess.getWebBrowserAccess().getSafariKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getWebBrowserAccess().getInternetExplorerKeyword_3()); }
		'internet explorer'
		{ after(grammarAccess.getWebBrowserAccess().getInternetExplorerKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getClickParserRuleCall_0()); }
		ruleClick
		{ after(grammarAccess.getActionAccess().getClickParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getInsertParserRuleCall_1()); }
		ruleInsert
		{ after(grammarAccess.getActionAccess().getInsertParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getVerifyParserRuleCall_2()); }
		ruleVerify
		{ after(grammarAccess.getActionAccess().getVerifyParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getLinkKeyword_0()); }
		'link'
		{ after(grammarAccess.getElementAccess().getLinkKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getInputKeyword_1()); }
		'input'
		{ after(grammarAccess.getElementAccess().getInputKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getButtonKeyword_2()); }
		'button'
		{ after(grammarAccess.getElementAccess().getButtonKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getCheckboxKeyword_3()); }
		'checkbox'
		{ after(grammarAccess.getElementAccess().getCheckboxKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getComboboxKeyword_4()); }
		'combobox'
		{ after(grammarAccess.getElementAccess().getComboboxKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getImageKeyword_5()); }
		'image'
		{ after(grammarAccess.getElementAccess().getImageKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getTextKeyword_6()); }
		'text'
		{ after(grammarAccess.getElementAccess().getTextKeyword_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributAccess().getClassKeyword_0()); }
		'class'
		{ after(grammarAccess.getAttributAccess().getClassKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributAccess().getValueKeyword_1()); }
		'value'
		{ after(grammarAccess.getAttributAccess().getValueKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAttributAccess().getAltKeyword_2()); }
		'alt'
		{ after(grammarAccess.getAttributAccess().getAltKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getTestAction_0()); }
	()
	{ after(grammarAccess.getTestAccess().getTestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getOpenKeyword_1()); }
	'open'
	{ after(grammarAccess.getTestAccess().getOpenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getWebBrowserAssignment_2()); }
	(rule__Test__WebBrowserAssignment_2)
	{ after(grammarAccess.getTestAccess().getWebBrowserAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__3__Impl
	rule__Test__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getGoKeyword_3()); }
	'go'
	{ after(grammarAccess.getTestAccess().getGoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__4__Impl
	rule__Test__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getToKeyword_4()); }
	'to'
	{ after(grammarAccess.getTestAccess().getToKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__5__Impl
	rule__Test__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getUrlAssignment_5()); }
	(rule__Test__UrlAssignment_5)
	{ after(grammarAccess.getTestAccess().getUrlAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getActionsAssignment_6()); }
	(rule__Test__ActionsAssignment_6)*
	{ after(grammarAccess.getTestAccess().getActionsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Get__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__0__Impl
	rule__Get__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getVarAssignment_0()); }
	(rule__Get__VarAssignment_0)
	{ after(grammarAccess.getGetAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__1__Impl
	rule__Get__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getGetAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__2__Impl
	rule__Get__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getGetKeyword_2()); }
	'get'
	{ after(grammarAccess.getGetAccess().getGetKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__3__Impl
	rule__Get__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getElementAssignment_3()); }
	(rule__Get__ElementAssignment_3)
	{ after(grammarAccess.getGetAccess().getElementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__4__Impl
	rule__Get__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getByKeyword_4()); }
	'by'
	{ after(grammarAccess.getGetAccess().getByKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__5__Impl
	rule__Get__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getAttrAssignment_5()); }
	(rule__Get__AttrAssignment_5)
	{ after(grammarAccess.getGetAccess().getAttrAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__6__Impl
	rule__Get__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getEqualsSignKeyword_6()); }
	'='
	{ after(grammarAccess.getGetAccess().getEqualsSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getAttrValAssignment_7()); }
	(rule__Get__AttrValAssignment_7)
	{ after(grammarAccess.getGetAccess().getAttrValAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getGetAssignment_0()); }
	(rule__Click__GetAssignment_0)
	{ after(grammarAccess.getClickAccess().getGetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__1__Impl
	rule__Click__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getClickKeyword_1()); }
	'click'
	{ after(grammarAccess.getClickAccess().getClickKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__2__Impl
	rule__Click__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getOnKeyword_2()); }
	'on'
	{ after(grammarAccess.getClickAccess().getOnKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getVarAssignment_3()); }
	(rule__Click__VarAssignment_3)
	{ after(grammarAccess.getClickAccess().getVarAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__0__Impl
	rule__Insert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getGetAssignment_0()); }
	(rule__Insert__GetAssignment_0)
	{ after(grammarAccess.getInsertAccess().getGetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__1__Impl
	rule__Insert__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getInsertKeyword_1()); }
	'insert'
	{ after(grammarAccess.getInsertAccess().getInsertKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__2__Impl
	rule__Insert__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getValueAssignment_2()); }
	(rule__Insert__ValueAssignment_2)
	{ after(grammarAccess.getInsertAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__3__Impl
	rule__Insert__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getInsertAccess().getInKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getVarAssignment_4()); }
	(rule__Insert__VarAssignment_4)
	{ after(grammarAccess.getInsertAccess().getVarAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__0__Impl
	rule__Verify__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getGetAssignment_0()); }
	(rule__Verify__GetAssignment_0)
	{ after(grammarAccess.getVerifyAccess().getGetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__1__Impl
	rule__Verify__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getVerifyPageContainsKeyword_1()); }
	'verify page contains'
	{ after(grammarAccess.getVerifyAccess().getVerifyPageContainsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getVarAssignment_2()); }
	(rule__Verify__VarAssignment_2)
	{ after(grammarAccess.getVerifyAccess().getVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__WebBrowserAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getWebBrowserWebBrowserParserRuleCall_2_0()); }
		ruleWebBrowser
		{ after(grammarAccess.getTestAccess().getWebBrowserWebBrowserParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__UrlAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getUrlSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestAccess().getUrlSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__ActionsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getActionsActionParserRuleCall_6_0()); }
		ruleAction
		{ after(grammarAccess.getTestAccess().getActionsActionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetAccess().getVarVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getGetAccess().getVarVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__ElementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetAccess().getElementElementParserRuleCall_3_0()); }
		ruleElement
		{ after(grammarAccess.getGetAccess().getElementElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__AttrAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetAccess().getAttrAttributParserRuleCall_5_0()); }
		ruleAttribut
		{ after(grammarAccess.getGetAccess().getAttrAttributParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__AttrValAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetAccess().getAttrValSTRINGTerminalRuleCall_7_0()); }
		RULE_STRING
		{ after(grammarAccess.getGetAccess().getAttrValSTRINGTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarReference__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarReferenceAccess().getVarVariableCrossReference_0()); }
		(
			{ before(grammarAccess.getVarReferenceAccess().getVarVariableIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVarReferenceAccess().getVarVariableIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVarReferenceAccess().getVarVariableCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__GetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getGetGetParserRuleCall_0_0()); }
		ruleGet
		{ after(grammarAccess.getClickAccess().getGetGetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__VarAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getVarVarReferenceParserRuleCall_3_0()); }
		ruleVarReference
		{ after(grammarAccess.getClickAccess().getVarVarReferenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__GetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getGetGetParserRuleCall_0_0()); }
		ruleGet
		{ after(grammarAccess.getInsertAccess().getGetGetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getInsertAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__VarAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getVarVarReferenceParserRuleCall_4_0()); }
		ruleVarReference
		{ after(grammarAccess.getInsertAccess().getVarVarReferenceParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__GetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerifyAccess().getGetGetParserRuleCall_0_0()); }
		ruleGet
		{ after(grammarAccess.getVerifyAccess().getGetGetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__VarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerifyAccess().getVarVarReferenceParserRuleCall_2_0()); }
		ruleVarReference
		{ after(grammarAccess.getVerifyAccess().getVarVarReferenceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
