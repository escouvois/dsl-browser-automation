/*
 * generated by Xtext 2.17.0
 */
package org.xtext.imt.fil.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BrowserAutomationGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWebBrowserAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWebBrowserWebBrowserParserRuleCall_2_0 = (RuleCall)cWebBrowserAssignment_2.eContents().get(0);
		private final Keyword cGoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUrlAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUrlSTRINGTerminalRuleCall_5_0 = (RuleCall)cUrlAssignment_5.eContents().get(0);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		
		//Test:
		//	{Test}
		//	'open' webBrowser=WebBrowser
		//	'go' 'to' url=STRING
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Test} 'open' webBrowser=WebBrowser 'go' 'to' url=STRING statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{Test}
		public Action getTestAction_0() { return cTestAction_0; }
		
		//'open'
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }
		
		//webBrowser=WebBrowser
		public Assignment getWebBrowserAssignment_2() { return cWebBrowserAssignment_2; }
		
		//WebBrowser
		public RuleCall getWebBrowserWebBrowserParserRuleCall_2_0() { return cWebBrowserWebBrowserParserRuleCall_2_0; }
		
		//'go'
		public Keyword getGoKeyword_3() { return cGoKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//url=STRING
		public Assignment getUrlAssignment_5() { return cUrlAssignment_5; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_5_0() { return cUrlSTRINGTerminalRuleCall_5_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }
	}
	public class WebBrowserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.WebBrowser");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMozillaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cChromeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSafariKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInternetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cExplorerKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//WebBrowser:
		//	'mozilla' | 'chrome' | 'safari' | 'internet' 'explorer';
		@Override public ParserRule getRule() { return rule; }
		
		//'mozilla' | 'chrome' | 'safari' | 'internet' 'explorer'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'mozilla'
		public Keyword getMozillaKeyword_0() { return cMozillaKeyword_0; }
		
		//'chrome'
		public Keyword getChromeKeyword_1() { return cChromeKeyword_1; }
		
		//'safari'
		public Keyword getSafariKeyword_2() { return cSafariKeyword_2; }
		
		//'internet' 'explorer'
		public Group getGroup_3() { return cGroup_3; }
		
		//'internet'
		public Keyword getInternetKeyword_3_0() { return cInternetKeyword_3_0; }
		
		//'explorer'
		public Keyword getExplorerKeyword_3_1() { return cExplorerKeyword_3_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cGetParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cActionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_0_1_0 = (RuleCall)cActionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUncheckKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAllKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Statement:
		//	Get
		//	action=Action | 'uncheck' 'all';
		@Override public ParserRule getRule() { return rule; }
		
		//Get action=Action | 'uncheck' 'all'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Get action=Action
		public Group getGroup_0() { return cGroup_0; }
		
		//Get
		public RuleCall getGetParserRuleCall_0_0() { return cGetParserRuleCall_0_0; }
		
		//action=Action
		public Assignment getActionAssignment_0_1() { return cActionAssignment_0_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_0_1_0() { return cActionActionParserRuleCall_0_1_0; }
		
		//'uncheck' 'all'
		public Group getGroup_1() { return cGroup_1; }
		
		//'uncheck'
		public Keyword getUncheckKeyword_1_0() { return cUncheckKeyword_1_0; }
		
		//'all'
		public Keyword getAllKeyword_1_1() { return cAllKeyword_1_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClickParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInsertParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVerifyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cChooseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Action:
		//	Click | Insert | Verify | Check | Choose;
		@Override public ParserRule getRule() { return rule; }
		
		//Click | Insert | Verify | Check | Choose
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Click
		public RuleCall getClickParserRuleCall_0() { return cClickParserRuleCall_0; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_1() { return cInsertParserRuleCall_1; }
		
		//Verify
		public RuleCall getVerifyParserRuleCall_2() { return cVerifyParserRuleCall_2; }
		
		//Check
		public RuleCall getCheckParserRuleCall_3() { return cCheckParserRuleCall_3; }
		
		//Choose
		public RuleCall getChooseParserRuleCall_4() { return cChooseParserRuleCall_4; }
	}
	public class GetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Get");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttrAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttrAttributParserRuleCall_5_0 = (RuleCall)cAttrAssignment_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAttrValAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAttrValSTRINGTerminalRuleCall_7_0 = (RuleCall)cAttrValAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////| Check | Uncheck | Choose
		//Get:
		//	var=Variable '=' 'get' element=Element 'by' attr=Attribut '[' attrVal=STRING ']';
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable '=' 'get' element=Element 'by' attr=Attribut '[' attrVal=STRING ']'
		public Group getGroup() { return cGroup; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'get'
		public Keyword getGetKeyword_2() { return cGetKeyword_2; }
		
		//element=Element
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_3_0() { return cElementElementParserRuleCall_3_0; }
		
		//'by'
		public Keyword getByKeyword_4() { return cByKeyword_4; }
		
		//attr=Attribut
		public Assignment getAttrAssignment_5() { return cAttrAssignment_5; }
		
		//Attribut
		public RuleCall getAttrAttributParserRuleCall_5_0() { return cAttrAttributParserRuleCall_5_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//attrVal=STRING
		public Assignment getAttrValAssignment_7() { return cAttrValAssignment_7; }
		
		//STRING
		public RuleCall getAttrValSTRINGTerminalRuleCall_7_0() { return cAttrValSTRINGTerminalRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cButtonKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCheckboxKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cComboboxKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cImageKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTextKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Element:
		//	'link' | 'input' | 'button' | 'checkbox' | 'combobox' | 'image' | 'text';
		@Override public ParserRule getRule() { return rule; }
		
		//'link' | 'input' | 'button' | 'checkbox' | 'combobox' | 'image' | 'text'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//'input'
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
		
		//'button'
		public Keyword getButtonKeyword_2() { return cButtonKeyword_2; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_3() { return cCheckboxKeyword_3; }
		
		//'combobox'
		public Keyword getComboboxKeyword_4() { return cComboboxKeyword_4; }
		
		//'image'
		public Keyword getImageKeyword_5() { return cImageKeyword_5; }
		
		//'text'
		public Keyword getTextKeyword_6() { return cTextKeyword_6; }
	}
	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Attribut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAltKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Attribut:
		//	'class' | 'value' | 'alt';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' | 'value' | 'alt'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//'value'
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
		
		//'alt'
		public Keyword getAltKeyword_2() { return cAltKeyword_2; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.VarReference");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableCrossReference_0.eContents().get(1);
		
		//VarReference:
		//	var=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[Variable]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[Variable]
		public CrossReference getVarVariableCrossReference_0() { return cVarVariableCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_0_1() { return cVarVariableIDTerminalRuleCall_0_1; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVarReferenceParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		//Click:
		//	'click' 'on' var=VarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'click' 'on' var=VarReference
		public Group getGroup() { return cGroup; }
		
		//'click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//var=VarReference
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//VarReference
		public RuleCall getVarVarReferenceParserRuleCall_2_0() { return cVarVarReferenceParserRuleCall_2_0; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarVarReferenceParserRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		
		//Insert:
		//	'insert' value=STRING 'in' var=VarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'insert' value=STRING 'in' var=VarReference
		public Group getGroup() { return cGroup; }
		
		//'insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//var=VarReference
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//VarReference
		public RuleCall getVarVarReferenceParserRuleCall_3_0() { return cVarVarReferenceParserRuleCall_3_0; }
	}
	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVarReferenceParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNullKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Verify:
		//	var=VarReference 'is' 'not' 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//var=VarReference 'is' 'not' 'null'
		public Group getGroup() { return cGroup; }
		
		//var=VarReference
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VarReference
		public RuleCall getVarVarReferenceParserRuleCall_0_0() { return cVarVarReferenceParserRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'not'
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }
		
		//'null'
		public Keyword getNullKeyword_3() { return cNullKeyword_3; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarReferenceParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Check:
		//	'check' var=VarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'check' var=VarReference
		public Group getGroup() { return cGroup; }
		
		//'check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//var=VarReference
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//VarReference
		public RuleCall getVarVarReferenceParserRuleCall_1_0() { return cVarVarReferenceParserRuleCall_1_0; }
	}
	public class ChooseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.fil.dsl.BrowserAutomation.Choose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChooseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarReferenceParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Choose:
		//	'choose' var=VarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'choose' var=VarReference
		public Group getGroup() { return cGroup; }
		
		//'choose'
		public Keyword getChooseKeyword_0() { return cChooseKeyword_0; }
		
		//var=VarReference
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//VarReference
		public RuleCall getVarVarReferenceParserRuleCall_1_0() { return cVarVarReferenceParserRuleCall_1_0; }
	}
	
	
	private final TestElements pTest;
	private final WebBrowserElements pWebBrowser;
	private final StatementElements pStatement;
	private final ActionElements pAction;
	private final GetElements pGet;
	private final ElementElements pElement;
	private final AttributElements pAttribut;
	private final VariableElements pVariable;
	private final VarReferenceElements pVarReference;
	private final ClickElements pClick;
	private final InsertElements pInsert;
	private final VerifyElements pVerify;
	private final CheckElements pCheck;
	private final ChooseElements pChoose;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BrowserAutomationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTest = new TestElements();
		this.pWebBrowser = new WebBrowserElements();
		this.pStatement = new StatementElements();
		this.pAction = new ActionElements();
		this.pGet = new GetElements();
		this.pElement = new ElementElements();
		this.pAttribut = new AttributElements();
		this.pVariable = new VariableElements();
		this.pVarReference = new VarReferenceElements();
		this.pClick = new ClickElements();
		this.pInsert = new InsertElements();
		this.pVerify = new VerifyElements();
		this.pCheck = new CheckElements();
		this.pChoose = new ChooseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.imt.fil.dsl.BrowserAutomation".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Test:
	//	{Test}
	//	'open' webBrowser=WebBrowser
	//	'go' 'to' url=STRING
	//	statements+=Statement*;
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//WebBrowser:
	//	'mozilla' | 'chrome' | 'safari' | 'internet' 'explorer';
	public WebBrowserElements getWebBrowserAccess() {
		return pWebBrowser;
	}
	
	public ParserRule getWebBrowserRule() {
		return getWebBrowserAccess().getRule();
	}
	
	//Statement:
	//	Get
	//	action=Action | 'uncheck' 'all';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Action:
	//	Click | Insert | Verify | Check | Choose;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	////| Check | Uncheck | Choose
	//Get:
	//	var=Variable '=' 'get' element=Element 'by' attr=Attribut '[' attrVal=STRING ']';
	public GetElements getGetAccess() {
		return pGet;
	}
	
	public ParserRule getGetRule() {
		return getGetAccess().getRule();
	}
	
	//Element:
	//	'link' | 'input' | 'button' | 'checkbox' | 'combobox' | 'image' | 'text';
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Attribut:
	//	'class' | 'value' | 'alt';
	public AttributElements getAttributAccess() {
		return pAttribut;
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VarReference:
	//	var=[Variable];
	public VarReferenceElements getVarReferenceAccess() {
		return pVarReference;
	}
	
	public ParserRule getVarReferenceRule() {
		return getVarReferenceAccess().getRule();
	}
	
	//Click:
	//	'click' 'on' var=VarReference;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Insert:
	//	'insert' value=STRING 'in' var=VarReference;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Verify:
	//	var=VarReference 'is' 'not' 'null';
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}
	
	//Check:
	//	'check' var=VarReference;
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//Choose:
	//	'choose' var=VarReference;
	public ChooseElements getChooseAccess() {
		return pChoose;
	}
	
	public ParserRule getChooseRule() {
		return getChooseAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
