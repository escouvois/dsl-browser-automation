/*
 * generated by Xtext 2.17.0
 */
package org.xtext.imt.fil.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.imt.fil.dsl.browserAutomation.BrowserAutomation
import org.xtext.imt.fil.dsl.browserAutomation.Check
import org.xtext.imt.fil.dsl.browserAutomation.Choose
import org.xtext.imt.fil.dsl.browserAutomation.Click
import org.xtext.imt.fil.dsl.browserAutomation.Contains
import org.xtext.imt.fil.dsl.browserAutomation.DoAction
import org.xtext.imt.fil.dsl.browserAutomation.Get
import org.xtext.imt.fil.dsl.browserAutomation.GoTo
import org.xtext.imt.fil.dsl.browserAutomation.Insert
import org.xtext.imt.fil.dsl.browserAutomation.Verify

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BrowserAutomationGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(BrowserAutomation)) {
			fsa.generateFile(e.testName.toFirstUpper + ".java", e.compile)
		}
	}

	def compile(BrowserAutomation browserAutomation) '''
		import org.openqa.selenium.By;
		import org.openqa.selenium.WebDriver;
		import org.openqa.selenium.WebElement;
		import org.openqa.selenium.«browserAutomation.webBrowser».«browserAutomation.webBrowser.toFirstUpper()»Driver;
		import org.openqa.selenium.support.ui.ExpectedConditions;
		import org.openqa.selenium.support.ui.WebDriverWait;
		«importList(browserAutomation)»
		
		public class «browserAutomation.testName.toFirstUpper» {
			public static void main(String[] args) {
				WebDriver driver = new «browserAutomation.webBrowser.toFirstUpper()»Driver();
				«FOR statement : browserAutomation.statements»
					«statement.statementType»
				«ENDFOR»
				driver.quit();
			}
		}
	'''

	protected def CharSequence importList(
		BrowserAutomation browserAutomation) '''«FOR statement : browserAutomation.statements»
		«IF statement instanceof DoAction»
			«IF ("text").equals(statement.get.element) && ("class").equals(statement.get.attr)»
				import java.util.List;
			«ENDIF»
		«ELSEIF statement instanceof Get»
			«IF ("text").equals(statement.element) && ("class").equals(statement.attr)»
				import java.util.List;
			«ENDIF»
		«ENDIF»
	«ENDFOR»'''

	def dispatch String statementType(Get get) '''
		«if(!get.pageTitle.isNullOrEmpty) {
			return '''String «get.varRef.name» = driver.getTitle();'''
		} else {
			switch (get.element) {
				case 'link': {
					switch (get.attr) {
						case 'value': {
							return 
							'''
							WebElement «get.varRef.name» = driver.findElement(By.xpath("//a[text()='«IF get.attrVal.stringVal !== null»«get.attrVal.stringVal.intern»«ELSE»«get.attrVal.varRefVal.varRef.name»«ENDIF»']"));
							'''
						}
						case 'href': {
							return
							'''
							WebElement «get.varRef.name» = driver.findElement(By.xpath("//a[@href='«IF get.attrVal.stringVal !== null»«get.attrVal.stringVal.intern»«ELSE»" + «get.attrVal.varRefVal.varRef.name» + "«ENDIF»']"));
							'''
						}
						default: {
							return
							'''
							String «get.varRef.name» = «get.from.varRef.name».getAttribute("pathname");
							'''
						}
					}
				}
				case 'image' : {
					switch (get.attr){
						case 'alt': {
							return 
							'''
							WebElement « get.varRef.name» = driver.findElement(By.xpath("//img[@alt='«IF get.attrVal.stringVal !== null»«get.attrVal.stringVal.intern»«ELSE»«get.attrVal.varRefVal.varRef.name»«ENDIF»']"));
							'''
						}
					}
				}
				case 'text' : {
					switch (get.attr) {
						case 'class': {
							return 
							'''
							List<WebElement> list = driver.findElements(By.cssSelector("div[class='«IF get.attrVal.stringVal !== null»«get.attrVal.stringVal.intern»«ELSE»«get.attrVal.varRefVal»«ENDIF»']"));
							String «get.varRef.name»Text = list.get(«get.order.order»-1).getText();
							WebElement «get.varRef.name» = driver.findElement(By.xpath("//a[@title='" + «get.varRef.name»Text + "']"));
							'''
						}
						case 'value' : {
							return
							'''
							WebElement «get.varRef.name» = driver.findElement(By.xpath("//*[contains(text(), '«IF get.attrVal.stringVal !== null»«get.attrVal.stringVal.intern»«ELSE»«get.attrVal.varRefVal»«ENDIF»')]"));
							'''
						}
					}
				}
				case 'input' : {
					switch (get.attr) {
						case 'value' : {
							return 
							'''
							WebElement «get.varRef.name» = driver.findElement(By.xpath("//input[@id='edit-search-api-fulltext']"));
							'''
						}
					}
				}
				case 'button' : {
					switch (get.attr) {
						case 'value' : {
							return
							'''
							WebElement «get.varRef.name» = driver.findElement(By.xpath("//*[contains(@value,'«IF get.attrVal.stringVal !== null»«get.attrVal.stringVal.intern»«ELSE»«get.attrVal.varRefVal»«ENDIF»')]"));
							'''
						}
					}
				}
				default: {
					
				}
			}
		}»
		
	'''

	def dispatch String statementType(GoTo goTo) '''
		driver.get("«goTo.url»");
		try{new WebDriverWait(driver, 5).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[@class='agree-button eu-cookie-compliance-default-button']"))).click();} catch(Exception e){}
	'''

	def dispatch statementType(DoAction doAction) '''
		«var i = doAction.get.statementType»
		«doAction.action.actionType(i.toString)»
	'''

	def dispatch actionType(Click click, String element) '''
		«element»
		«click.varClick.varRef.name».click();
	'''

	def dispatch actionType(Insert insert, String element) '''
		«element»
		«insert.varInserted.varRef.name».sendKeys(«IF insert.attrVal !== null»"«insert.attrVal»"«ELSE»«insert.varToInsert.varRef.name»Text«ENDIF»);
	'''

	def dispatch actionType(Verify verify, String element) '''
		«element»
		System.out.println("Test passed: " + («verify.varToVerify.varRef.name» == null ? "false" : "true"));
	'''

	def dispatch actionType(Check check, String element) '''
	'''

	def dispatch actionType(Choose choose, String element) '''
	'''

	def dispatch actionType(Contains contains, String element) '''
		«element»
		System.out.println("Test passed: " + «contains.varContains.varRef.name».contains(«contains.varContained.varRef.name»Text));
	'''
}
